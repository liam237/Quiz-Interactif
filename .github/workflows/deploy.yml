name: Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-interactif:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-interactif:latest

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Configuration de SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 4f5d-2a01-cb00-8408-1f00-f95b-286f-a324-d0af.ngrok-free.app >> ~/.ssh/known_hosts

          # Déploiement sur le serveur
          ssh -o StrictHostKeyChecking=no liamouuu@4f5d-2a01-cb00-8408-1f00-f95b-286f-a324-d0af.ngrok-free.app << 'EOF'
            # Tirer la dernière image Docker
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-interactif:latest
            
            # Arrêter et supprimer les anciens conteneurs
            container_ids=$(docker ps -q --filter "ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/quiz-interactif:latest")
            if [ -n "$container_ids" ]; then
              docker stop $container_ids
              docker rm $container_ids
            fi
            
            # Exécuter le nouveau conteneur
            docker run -d -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-interactif:latest
          EOF
